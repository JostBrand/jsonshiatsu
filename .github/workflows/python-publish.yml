name: Release and Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write  # For trusted publishing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install dependencies
        run: poetry install --with dev
        
      - name: Run tests
        run: poetry run pytest tests/ -v

      - name: Run linting
        run: |
          poetry run ruff check jsonshiatsu tests examples
          poetry run ruff format --check jsonshiatsu tests examples

      - name: Run type checking
        run: poetry run mypy jsonshiatsu
        
      - name: Build package
        run: poetry build

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate release notes from recent commits
          if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
            echo "## Changes since $PREV_TAG" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> release_notes.md
          else
            echo "## ðŸŽ‰ Initial Release" > release_notes.md
            echo "" >> release_notes.md
            echo "First release of jsonshiatsu - the therapeutic JSON parser!" >> release_notes.md
            echo "" >> release_notes.md
            echo "### âœ¨ Features" >> release_notes.md
            echo "- Parse malformed JSON with ease" >> release_notes.md
            echo "- Handle unquoted keys, trailing commas, comments" >> release_notes.md
            echo "- Security limits and streaming support" >> release_notes.md
            echo "- Full compatibility with standard json module" >> release_notes.md
            echo "- Modern CI pipeline with ruff" >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ steps.release_notes.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  publish:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # For trusted publishing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install dependencies
        run: poetry install --only=main
        
      - name: Build package
        run: poetry build
        
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
